{"ast":null,"code":"var _jsxFileName = \"/Users/sarthakchaudhary/Documents/WebD/mern/chat/frontend/src/Pages/ChatPage/ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext } from \"react\";\nimport io from \"socket.io-client\";\nimport arrow from \"../../assets/arrow.png\";\nimport logo from \"../../assets/logo.png\";\nimport \"./ChatPage.css\";\nimport ping from \"../../assets/ping.mp3\";\nimport { UserContext } from \"../../UserContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const {\n    user,\n    setUser\n  } = useContext(UserContext);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const socket = io(\"http://localhost:8000\");\n    const form = document.getElementById(\"send-container\");\n    const messageInput = document.getElementById(\"messageInp\");\n    const messageContainer = document.querySelector(\".container\");\n    var audio = new Audio(ping);\n    audio.muted = true;\n    window.addEventListener(\"click\", function () {\n      audio.muted = false;\n    });\n    const fetchUser = async () => {\n      if (user) {\n        // Check if user is not null\n        const response = await fetch(\"http://localhost:9000/name\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"Application/json\"\n          },\n          credentials: \"include\",\n          // Include credentials for cross-origin requests\n          body: JSON.stringify({\n            email: user.email\n          }) // Include the email in the request body\n        });\n        const userData = await response.json();\n        console.log(userData);\n        setUser(userData);\n        getname(userData).then(({\n          firstName,\n          email\n        }) => {\n          console.log(firstName);\n          // Only call setUser if the user data has changed\n          if (user.firstName !== firstName || user.email !== email) {\n            setUser({\n              firstName,\n              email\n            }); // Update the state here\n          }\n          if (firstName) {\n            socket.emit(\"new-user-joined\", {\n              firstName\n            }); // Emit the event here\n          } else {\n            console.log(\"user not available\");\n          }\n        }).catch(error => {\n          console.error(error);\n        }); // Pass the new user data directly to getname\n      } else {\n        console.log('user is null in fetchuser');\n      }\n    };\n    fetchUser().then(() => {\n      setLoading(false);\n    });\n    const append = (message, position) => {\n      const messageElement = document.createElement(\"div\");\n      const date = new Date(); // Get current date/time\n      const timestamp = `${date.getHours()}:${date.getMinutes()}`; // Format: HH:MM\n      messageElement.innerHTML = `<span class=\"timestamp\">${timestamp}</span>${message}`;\n      messageElement.classList.add(\"message\");\n      messageElement.classList.add(position);\n      messageContainer.append(messageElement);\n    };\n    form.addEventListener(\"submit\", e => {\n      e.preventDefault();\n      const message = messageInput.value;\n      append(`You: ${message}`, \"right\");\n      socket.emit(\"send\", message);\n      messageInput.value = \"\";\n    });\n    socket.on(\"user-joined\", data => {\n      append(`${data.firstName} joined the chat`, \"left\");\n    });\n    socket.on(\"receive\", data => {\n      append(`${data.firstName}: ${data.message}`, \"left\");\n      audio.play();\n    });\n    socket.on(\"left\", name => {\n      append(`${name} left the chat`, \"left\");\n    });\n    const getname = async function (user) {\n      let firstName = \"\";\n      let email = \"\";\n      console.log(\"User object at start of getname:\", user);\n      if (user && user.email) {\n        email = user.email;\n        const response = await fetch(\"http://localhost:9000/name\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: user.email\n          }),\n          headers: {\n            \"Content-Type\": \"Application/json\"\n          },\n          credentials: \"include\"\n        });\n        const data = await response.json();\n        console.log(\"Response data from server:\", data);\n        if (data && data.firstName) {\n          // Check if data and data.firstName are not null\n          firstName = data.firstName;\n          console.log(\"First name after fetch:\", firstName);\n          setUser({\n            firstName,\n            email\n          }); // Update the state here\n        } else {\n          console.log(\"First name not available in response data\");\n        }\n      }\n      return {\n        firstName,\n        email\n      };\n    };\n  }, []); // Removed 'user' from the dependency array\n  if (loading) {\n    // If the user data is still being fetched, render a loading spinner\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this);\n  } else {\n    // Once the user data has been fetched, render the ChatPage component\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"logo\",\n          src: logo,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          id: \"h2\",\n          children: \"Anonymous Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"send\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"#\",\n          id: \"send-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"messageInp\",\n            placeholder: \"Message...\",\n            id: \"messageInp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn\",\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: arrow,\n              alt: \"\",\n              srcset: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this);\n  }\n  ;\n};\n_s(ChatPage, \"X2B6CFMKLMfS2JOE6/oqHGzpcZA=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useContext","io","arrow","logo","ping","UserContext","jsxDEV","_jsxDEV","ChatPage","_s","user","setUser","loading","setLoading","useState","socket","form","document","getElementById","messageInput","messageContainer","querySelector","audio","Audio","muted","window","addEventListener","fetchUser","response","fetch","method","headers","credentials","body","JSON","stringify","email","userData","json","console","log","getname","then","firstName","emit","catch","error","append","message","position","messageElement","createElement","date","Date","timestamp","getHours","getMinutes","innerHTML","classList","add","e","preventDefault","value","on","data","play","name","LoadingSpinner","fileName","_jsxFileName","lineNumber","columnNumber","className","children","class","src","alt","id","action","type","placeholder","srcset","_c","$RefreshReg$"],"sources":["/Users/sarthakchaudhary/Documents/WebD/mern/chat/frontend/src/Pages/ChatPage/ChatPage.jsx"],"sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport io from \"socket.io-client\";\nimport arrow from \"../../assets/arrow.png\";\nimport logo from \"../../assets/logo.png\";\nimport \"./ChatPage.css\";\nimport ping from \"../../assets/ping.mp3\";\nimport { UserContext } from \"../../UserContextProvider\";\n\nconst ChatPage = () => {\n  const { user, setUser } = useContext(UserContext);\n  const [loading, setLoading] = useState(true);\n\n\n  useEffect(() => {\n    const socket = io(\"http://localhost:8000\");\n    const form = document.getElementById(\"send-container\");\n    const messageInput = document.getElementById(\"messageInp\");\n    const messageContainer = document.querySelector(\".container\");\n    var audio = new Audio(ping);\n    audio.muted = true;\n\n    window.addEventListener(\"click\", function () {\n      audio.muted = false;\n    });\n\n    const fetchUser = async () => {\n      if (user) { // Check if user is not null\n        const response = await fetch(\"http://localhost:9000/name\",{\n          method: \"POST\",\n          headers: { \"Content-Type\": \"Application/json\" },\n          credentials: \"include\", // Include credentials for cross-origin requests\n          body: JSON.stringify({ email: user.email }) // Include the email in the request body\n        });\n        \n        const userData = await response.json();\n        console.log(userData);\n        setUser(userData);\n        getname(userData).then(({ firstName, email }) => {\n          console.log(firstName);\n          // Only call setUser if the user data has changed\n          if (user.firstName !== firstName || user.email !== email) {\n            setUser({ firstName, email }); // Update the state here\n          }\n          if (firstName) {\n            socket.emit(\"new-user-joined\", { firstName }); // Emit the event here\n          } else {\n            console.log(\"user not available\");\n          }\n          \n        })\n        .catch((error) => {\n          console.error(error);\n        }); // Pass the new user data directly to getname\n      }\n      else{\n        console.log('user is null in fetchuser')\n      }\n    };\n\n    fetchUser().then(()=>{\n      setLoading(false);\n    });\n\n    const append = (message, position) => {\n      const messageElement = document.createElement(\"div\");\n      const date = new Date(); // Get current date/time\n      const timestamp = `${date.getHours()}:${date.getMinutes()}`; // Format: HH:MM\n      messageElement.innerHTML = `<span class=\"timestamp\">${timestamp}</span>${message}`;\n      messageElement.classList.add(\"message\");\n      messageElement.classList.add(position);\n      messageContainer.append(messageElement);\n    };\n\n    form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = messageInput.value;\n      append(`You: ${message}`, \"right\");\n      socket.emit(\"send\", message);\n      messageInput.value = \"\";\n    });\n\n    socket.on(\"user-joined\", (data) => {\n      append(`${data.firstName} joined the chat`, \"left\");\n    });\n\n    socket.on(\"receive\", (data) => {\n      append(`${data.firstName}: ${data.message}`, \"left\");\n      audio.play();\n    });\n    socket.on(\"left\", (name) => {\n      append(`${name} left the chat`, \"left\");\n    });\n\n    const getname = async function (user) {\n      let firstName = \"\";\n      let email = \"\";\n      console.log(\"User object at start of getname:\", user);\n    \n      if (user && user.email) {\n        email = user.email;\n        const response = await fetch(\"http://localhost:9000/name\", {\n          method: \"POST\",\n          body: JSON.stringify({ email: user.email }),\n          headers: { \"Content-Type\": \"Application/json\" },\n          credentials: \"include\",\n        });\n    \n        const data = await response.json();\n        console.log(\"Response data from server:\", data);\n        if (data && data.firstName) { // Check if data and data.firstName are not null\n          firstName = data.firstName;\n          console.log(\"First name after fetch:\", firstName);\n          setUser({ firstName, email }); // Update the state here\n        } else {\n          console.log(\"First name not available in response data\");\n        }\n      }\n      return { firstName, email };\n    };\n    \n\n  }, []); // Removed 'user' from the dependency array\n  if (loading) {\n    // If the user data is still being fetched, render a loading spinner\n    return <LoadingSpinner />;\n  } else {\n    // Once the user data has been fetched, render the ChatPage component\n    \n  \n\n  return (\n    <div className=\"wrapper\">\n      <nav>\n        <img class=\"logo\" src={logo} alt=\"\" />\n        <h2 id=\"h2\">Anonymous Chat</h2>\n      </nav>\n\n      <div class=\"container\"></div>\n      <div class=\"send\">\n        <form action=\"#\" id=\"send-container\">\n          <input\n            type=\"text\"\n            name=\"messageInp\"\n            placeholder=\"Message...\"\n            id=\"messageInp\"\n          />\n          <button class=\"btn\" type=\"submit\">\n            <img src={arrow} alt=\"\" srcset=\"\" />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n}\n\nexport default ChatPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACpD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAO,gBAAgB;AACvB,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,WAAW,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGX,UAAU,CAACK,WAAW,CAAC;EACjD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAG5Cf,SAAS,CAAC,MAAM;IACd,MAAMgB,MAAM,GAAGd,EAAE,CAAC,uBAAuB,CAAC;IAC1C,MAAMe,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC;IACtD,MAAMC,YAAY,GAAGF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IAC1D,MAAME,gBAAgB,GAAGH,QAAQ,CAACI,aAAa,CAAC,YAAY,CAAC;IAC7D,IAAIC,KAAK,GAAG,IAAIC,KAAK,CAACnB,IAAI,CAAC;IAC3BkB,KAAK,CAACE,KAAK,GAAG,IAAI;IAElBC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAY;MAC3CJ,KAAK,CAACE,KAAK,GAAG,KAAK;IACrB,CAAC,CAAC;IAEF,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAIjB,IAAI,EAAE;QAAE;QACV,MAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAC;UACxDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,WAAW,EAAE,SAAS;UAAE;UACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAE1B,IAAI,CAAC0B;UAAM,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,MAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACtCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;QACrB1B,OAAO,CAAC0B,QAAQ,CAAC;QACjBI,OAAO,CAACJ,QAAQ,CAAC,CAACK,IAAI,CAAC,CAAC;UAAEC,SAAS;UAAEP;QAAM,CAAC,KAAK;UAC/CG,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;UACtB;UACA,IAAIjC,IAAI,CAACiC,SAAS,KAAKA,SAAS,IAAIjC,IAAI,CAAC0B,KAAK,KAAKA,KAAK,EAAE;YACxDzB,OAAO,CAAC;cAAEgC,SAAS;cAAEP;YAAM,CAAC,CAAC,CAAC,CAAC;UACjC;UACA,IAAIO,SAAS,EAAE;YACb5B,MAAM,CAAC6B,IAAI,CAAC,iBAAiB,EAAE;cAAED;YAAU,CAAC,CAAC,CAAC,CAAC;UACjD,CAAC,MAAM;YACLJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACnC;QAEF,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAK;UAChBP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC;QACtB,CAAC,CAAC,CAAC,CAAC;MACN,CAAC,MACG;QACFP,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC1C;IACF,CAAC;IAEDb,SAAS,CAAC,CAAC,CAACe,IAAI,CAAC,MAAI;MACnB7B,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,MAAMkC,MAAM,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;MACpC,MAAMC,cAAc,GAAGjC,QAAQ,CAACkC,aAAa,CAAC,KAAK,CAAC;MACpD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;MACzB,MAAMC,SAAS,GAAI,GAAEF,IAAI,CAACG,QAAQ,CAAC,CAAE,IAAGH,IAAI,CAACI,UAAU,CAAC,CAAE,EAAC,CAAC,CAAC;MAC7DN,cAAc,CAACO,SAAS,GAAI,2BAA0BH,SAAU,UAASN,OAAQ,EAAC;MAClFE,cAAc,CAACQ,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;MACvCT,cAAc,CAACQ,SAAS,CAACC,GAAG,CAACV,QAAQ,CAAC;MACtC7B,gBAAgB,CAAC2B,MAAM,CAACG,cAAc,CAAC;IACzC,CAAC;IAEDlC,IAAI,CAACU,gBAAgB,CAAC,QAAQ,EAAGkC,CAAC,IAAK;MACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClB,MAAMb,OAAO,GAAG7B,YAAY,CAAC2C,KAAK;MAClCf,MAAM,CAAE,QAAOC,OAAQ,EAAC,EAAE,OAAO,CAAC;MAClCjC,MAAM,CAAC6B,IAAI,CAAC,MAAM,EAAEI,OAAO,CAAC;MAC5B7B,YAAY,CAAC2C,KAAK,GAAG,EAAE;IACzB,CAAC,CAAC;IAEF/C,MAAM,CAACgD,EAAE,CAAC,aAAa,EAAGC,IAAI,IAAK;MACjCjB,MAAM,CAAE,GAAEiB,IAAI,CAACrB,SAAU,kBAAiB,EAAE,MAAM,CAAC;IACrD,CAAC,CAAC;IAEF5B,MAAM,CAACgD,EAAE,CAAC,SAAS,EAAGC,IAAI,IAAK;MAC7BjB,MAAM,CAAE,GAAEiB,IAAI,CAACrB,SAAU,KAAIqB,IAAI,CAAChB,OAAQ,EAAC,EAAE,MAAM,CAAC;MACpD1B,KAAK,CAAC2C,IAAI,CAAC,CAAC;IACd,CAAC,CAAC;IACFlD,MAAM,CAACgD,EAAE,CAAC,MAAM,EAAGG,IAAI,IAAK;MAC1BnB,MAAM,CAAE,GAAEmB,IAAK,gBAAe,EAAE,MAAM,CAAC;IACzC,CAAC,CAAC;IAEF,MAAMzB,OAAO,GAAG,eAAAA,CAAgB/B,IAAI,EAAE;MACpC,IAAIiC,SAAS,GAAG,EAAE;MAClB,IAAIP,KAAK,GAAG,EAAE;MACdG,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE9B,IAAI,CAAC;MAErD,IAAIA,IAAI,IAAIA,IAAI,CAAC0B,KAAK,EAAE;QACtBA,KAAK,GAAG1B,IAAI,CAAC0B,KAAK;QAClB,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACzDC,MAAM,EAAE,MAAM;UACdG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAE1B,IAAI,CAAC0B;UAAM,CAAC,CAAC;UAC3CL,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,WAAW,EAAE;QACf,CAAC,CAAC;QAEF,MAAMgC,IAAI,GAAG,MAAMpC,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEwB,IAAI,CAAC;QAC/C,IAAIA,IAAI,IAAIA,IAAI,CAACrB,SAAS,EAAE;UAAE;UAC5BA,SAAS,GAAGqB,IAAI,CAACrB,SAAS;UAC1BJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,SAAS,CAAC;UACjDhC,OAAO,CAAC;YAAEgC,SAAS;YAAEP;UAAM,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,MAAM;UACLG,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QAC1D;MACF;MACA,OAAO;QAAEG,SAAS;QAAEP;MAAM,CAAC;IAC7B,CAAC;EAGH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR,IAAIxB,OAAO,EAAE;IACX;IACA,oBAAOL,OAAA,CAAC4D,cAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3B,CAAC,MAAM;IACL;;IAIF,oBACEhE,OAAA;MAAKiE,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBlE,OAAA;QAAAkE,QAAA,gBACElE,OAAA;UAAKmE,KAAK,EAAC,MAAM;UAACC,GAAG,EAAExE,IAAK;UAACyE,GAAG,EAAC;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACtChE,OAAA;UAAIsE,EAAE,EAAC,IAAI;UAAAJ,QAAA,EAAC;QAAc;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eAENhE,OAAA;QAAKmE,KAAK,EAAC;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC7BhE,OAAA;QAAKmE,KAAK,EAAC,MAAM;QAAAD,QAAA,eACflE,OAAA;UAAMuE,MAAM,EAAC,GAAG;UAACD,EAAE,EAAC,gBAAgB;UAAAJ,QAAA,gBAClClE,OAAA;YACEwE,IAAI,EAAC,MAAM;YACXb,IAAI,EAAC,YAAY;YACjBc,WAAW,EAAC,YAAY;YACxBH,EAAE,EAAC;UAAY;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CAAC,eACFhE,OAAA;YAAQmE,KAAK,EAAC,KAAK;YAACK,IAAI,EAAC,QAAQ;YAAAN,QAAA,eAC/BlE,OAAA;cAAKoE,GAAG,EAAEzE,KAAM;cAAC0E,GAAG,EAAC,EAAE;cAACK,MAAM,EAAC;YAAE;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAAC;AACD,CAAC;AAAA9D,EAAA,CAlJKD,QAAQ;AAAA0E,EAAA,GAAR1E,QAAQ;AAoJd,eAAeA,QAAQ;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}